{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. test The HTML specification is maintained by the W3C .","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#test","text":"The HTML specification is maintained by the W3C .","title":"test"},{"location":"tags/","text":"Tags Following is a list of relevant tags: ansible Ansible cheat sheet crypto SSH setup for GitHub Configuring GPG dhcp Raspberry Pi Networking dns Cloudflare DNS Settings git SSH setup for GitHub github SSH setup for GitHub gpg Configuring GPG internet Linux Open Ports links Docker Links Kubernetes Links Website Links linux Linux Open Ports network Raspberry Pi Networking ports Linux Open Ports privacy Cloudflare DNS Settings raspberry pi Raspberry Pi Networking raspbian Raspberry Pi Networking ssh SSH setup for GitHub wifi Raspberry Pi Networking","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#ansible","text":"Ansible cheat sheet","title":"ansible"},{"location":"tags/#crypto","text":"SSH setup for GitHub Configuring GPG","title":"crypto"},{"location":"tags/#dhcp","text":"Raspberry Pi Networking","title":"dhcp"},{"location":"tags/#dns","text":"Cloudflare DNS Settings","title":"dns"},{"location":"tags/#git","text":"SSH setup for GitHub","title":"git"},{"location":"tags/#github","text":"SSH setup for GitHub","title":"github"},{"location":"tags/#gpg","text":"Configuring GPG","title":"gpg"},{"location":"tags/#internet","text":"Linux Open Ports","title":"internet"},{"location":"tags/#links","text":"Docker Links Kubernetes Links Website Links","title":"links"},{"location":"tags/#linux","text":"Linux Open Ports","title":"linux"},{"location":"tags/#network","text":"Raspberry Pi Networking","title":"network"},{"location":"tags/#ports","text":"Linux Open Ports","title":"ports"},{"location":"tags/#privacy","text":"Cloudflare DNS Settings","title":"privacy"},{"location":"tags/#raspberry-pi","text":"Raspberry Pi Networking","title":"raspberry pi"},{"location":"tags/#raspbian","text":"Raspberry Pi Networking","title":"raspbian"},{"location":"tags/#ssh","text":"SSH setup for GitHub","title":"ssh"},{"location":"tags/#wifi","text":"Raspberry Pi Networking","title":"wifi"},{"location":"Links/docker/","tags":["links"],"text":"Dockerfile Running Docker Containers as Current Host User Traefik 2 & TLS 101 - HTTPS (& TCP over TLS) for everyone!","title":"Docker Links"},{"location":"Links/docker/#dockerfile","text":"Running Docker Containers as Current Host User Traefik 2 & TLS 101 - HTTPS (& TCP over TLS) for everyone!","title":"Dockerfile"},{"location":"Links/kubernetes/","tags":["links"],"text":"Kubernetes Implementations Ubuntu MicroK8s Software Pakaging Helm.sh - The package manager for Kubernetes","title":"Kubernetes Links"},{"location":"Links/kubernetes/#kubernetes-implementations","text":"Ubuntu MicroK8s","title":"Kubernetes Implementations"},{"location":"Links/kubernetes/#software-pakaging","text":"Helm.sh - The package manager for Kubernetes","title":"Software Pakaging"},{"location":"Links/mail/","text":"Mail Links postfix Digital Ocean send only smtp server","title":"Mail Links"},{"location":"Links/mail/#mail-links","text":"","title":"Mail Links"},{"location":"Links/mail/#postfix","text":"Digital Ocean send only smtp server","title":"postfix"},{"location":"Links/website/","tags":["links"],"text":"Theme https://www.mkdocs.org/ https://squidfunk.github.io/mkdocs-material/ https://facelessuser.github.io/pymdown-extensions/ Misc Color picker","title":"Website Links"},{"location":"Links/website/#theme","text":"https://www.mkdocs.org/ https://squidfunk.github.io/mkdocs-material/ https://facelessuser.github.io/pymdown-extensions/","title":"Theme"},{"location":"Links/website/#misc","text":"Color picker","title":"Misc"},{"location":"Linux/Ansible/ansible-cheat-sheet/","tags":["ansible"],"text":"This page just contains some examples that I use to copy from when creating my own playbooks. Most of this comes directly from the documentation. copy - name: Copy file with owner and permissions ansible.builtin.copy: src: files/foo.conf dest: /etc/foo.conf owner: foo group: foo mode: '0644' - name: Copy using inline content ansible.builtin.copy: content: '# This file was moved to /etc/other.conf' dest: /etc/mine.conf - name: Copy a \"sudoers\" file on the remote machine for editing ansible.builtin.copy: src: /etc/sudoers dest: /etc/sudoers.edit remote_src: yes validate: /usr/sbin/visudo -csf %s file - name: Change file ownership, group and permissions ansible.builtin.file: path: /etc/foo.conf src: /tmp/bar # only for links owner: foo group: foo mode: '0644' state: 'directory|absent|file|link|touch' recurse: false stat - name: Get stats of a file ansible.builtin.stat: path: /etc/foo.conf register: st - name: File exists debug: msg: \"The file or directory exists\" when: st.stat.exists - name: is link ansible.builtin.debug: msg: \"Path exists and is a symlink\" when: st.stat.islnk is defined and st.stat.islnk - name: is directory ansible.builtin.debug: msg: \"Path exists and is a directory\" when: st.stat.isdir is defined and st.stat.isdir","title":"Ansible cheat sheet"},{"location":"Linux/Ansible/ansible-cheat-sheet/#copy","text":"- name: Copy file with owner and permissions ansible.builtin.copy: src: files/foo.conf dest: /etc/foo.conf owner: foo group: foo mode: '0644' - name: Copy using inline content ansible.builtin.copy: content: '# This file was moved to /etc/other.conf' dest: /etc/mine.conf - name: Copy a \"sudoers\" file on the remote machine for editing ansible.builtin.copy: src: /etc/sudoers dest: /etc/sudoers.edit remote_src: yes validate: /usr/sbin/visudo -csf %s","title":"copy"},{"location":"Linux/Ansible/ansible-cheat-sheet/#file","text":"- name: Change file ownership, group and permissions ansible.builtin.file: path: /etc/foo.conf src: /tmp/bar # only for links owner: foo group: foo mode: '0644' state: 'directory|absent|file|link|touch' recurse: false","title":"file"},{"location":"Linux/Ansible/ansible-cheat-sheet/#stat","text":"- name: Get stats of a file ansible.builtin.stat: path: /etc/foo.conf register: st - name: File exists debug: msg: \"The file or directory exists\" when: st.stat.exists - name: is link ansible.builtin.debug: msg: \"Path exists and is a symlink\" when: st.stat.islnk is defined and st.stat.islnk - name: is directory ansible.builtin.debug: msg: \"Path exists and is a directory\" when: st.stat.isdir is defined and st.stat.isdir","title":"stat"},{"location":"Linux/Network/cloudflare/","tags":["dns","privacy"],"text":"Links https://www.cloudflare.com/learning/dns/what-is-1.1.1.1/ https://1.1.1.1/ ipv4 addresses 1.1.1.1 1.0.0.1 ipv6 addresses 2606:4700:4700::1111 2606:4700:4700::1001 dns over https https://developers.cloudflare.com/1.1.1.1/dns-over-https Yes you still need regular DNS present to resolve the url below! Usually used inside browser, while the rest of the system uses regular DNS. https://cloudflare-dns.com/dns-query udp wireformat DNS wireformat is defined in RFC1035. examples using both GET and PUT curl -H 'accept: application/dns-message' -v 'https://cloudflare-dns.com/dns-query?dns=q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB' | hexdump echo -n 'q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB' | base64 -D | curl -H 'content-type: application/dns-message' --data-binary @- https://cloudflare-dns.com/dns-query -o - | hexdump json curl -H 'accept: application/dns-json' 'https://cloudflare-dns.com/dns-query?name=example.com&type=AAAA'","title":"Cloudflare DNS Settings"},{"location":"Linux/Network/cloudflare/#links","text":"https://www.cloudflare.com/learning/dns/what-is-1.1.1.1/ https://1.1.1.1/","title":"Links"},{"location":"Linux/Network/cloudflare/#ipv4-addresses","text":"1.1.1.1 1.0.0.1","title":"ipv4 addresses"},{"location":"Linux/Network/cloudflare/#ipv6-addresses","text":"2606:4700:4700::1111 2606:4700:4700::1001","title":"ipv6 addresses"},{"location":"Linux/Network/cloudflare/#dns-over-https","text":"https://developers.cloudflare.com/1.1.1.1/dns-over-https Yes you still need regular DNS present to resolve the url below! Usually used inside browser, while the rest of the system uses regular DNS. https://cloudflare-dns.com/dns-query","title":"dns over https"},{"location":"Linux/Network/cloudflare/#udp-wireformat","text":"DNS wireformat is defined in RFC1035. examples using both GET and PUT curl -H 'accept: application/dns-message' -v 'https://cloudflare-dns.com/dns-query?dns=q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB' | hexdump echo -n 'q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB' | base64 -D | curl -H 'content-type: application/dns-message' --data-binary @- https://cloudflare-dns.com/dns-query -o - | hexdump","title":"udp wireformat"},{"location":"Linux/Network/cloudflare/#json","text":"curl -H 'accept: application/dns-json' 'https://cloudflare-dns.com/dns-query?name=example.com&type=AAAA'","title":"json"},{"location":"Linux/Network/open_ports/","tags":["linux","internet","ports"],"text":"lsof sudo lsof -i -P -n | grep LISTEN -i: list open ports -P: dont convert port numbers to names -n: don't do reverse dns lookups ss netstat has been deprecated. ss is its replacement. sudo ss -tulpn | grep LISTEN -t: tcp -u: udp -l: listenng sockets -p: process id of listening process -n: don't do reverse dns lookups","title":"Linux Open Ports"},{"location":"Linux/Network/open_ports/#lsof","text":"sudo lsof -i -P -n | grep LISTEN -i: list open ports -P: dont convert port numbers to names -n: don't do reverse dns lookups","title":"lsof"},{"location":"Linux/Network/open_ports/#ss","text":"netstat has been deprecated. ss is its replacement. sudo ss -tulpn | grep LISTEN -t: tcp -u: udp -l: listenng sockets -p: process id of listening process -n: don't do reverse dns lookups","title":"ss"},{"location":"Linux/Network/raspbian-networking/","tags":["raspbian","raspberry pi","network","wifi","dhcp"],"text":"Even though Raspbian is based on Debian its networking configuration is much simpler than other Debian based systems. Almost all configuration is done through the dhcp client. Dynamic (dhcp) address The default /etc/dhcpcd.conf will give you a dynamic ip address. There is no specific configuration that need to be present in the file. As long as there is no static configuration section (see below) the raspberry pi will use dhcp to assign a dynamic aip address. Static address Add the following lines to /etc/dhcpcd.conf # static IP configuration: interface eth0 static domain_name=home static domain_search=home static ip_address=192.168.0.10/24 static ip6_address=fd50:12ab:34cd:56ef::ff/64 static routers=192.168.0.1 static domain_name_servers=192.168.0.2 WiFi To connect to a wireless network you need to edit the /etc/wpa_supplicant/wpa_supplicant.conf file with the wifi network details: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev country=GB update_config=1 network={ ssid=\"HOMEWIFI\" psk=\"my_wifi_password\" } Multiple network sections can exist for different wifi networks that you can connect to. Again the default configuration will provide a dhcp assigned ip address. No additional changes are needed for dynamic addressing. Disable Wifi When I use a Raspberry Pi as a server I usually disable wifi and bluetooth. The way I do it that seem to work is to append disable-wifi,disable-bt to dtoverlay= in /boot/config.txt dtoverlay=disable-wifi,disable-bt Resources https://www.raspberrypi.org/documentation/computers/configuration.html","title":"Raspberry Pi Networking"},{"location":"Linux/Network/raspbian-networking/#dynamic-dhcp-address","text":"The default /etc/dhcpcd.conf will give you a dynamic ip address. There is no specific configuration that need to be present in the file. As long as there is no static configuration section (see below) the raspberry pi will use dhcp to assign a dynamic aip address.","title":"Dynamic (dhcp) address"},{"location":"Linux/Network/raspbian-networking/#static-address","text":"Add the following lines to /etc/dhcpcd.conf # static IP configuration: interface eth0 static domain_name=home static domain_search=home static ip_address=192.168.0.10/24 static ip6_address=fd50:12ab:34cd:56ef::ff/64 static routers=192.168.0.1 static domain_name_servers=192.168.0.2","title":"Static address"},{"location":"Linux/Network/raspbian-networking/#wifi","text":"To connect to a wireless network you need to edit the /etc/wpa_supplicant/wpa_supplicant.conf file with the wifi network details: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev country=GB update_config=1 network={ ssid=\"HOMEWIFI\" psk=\"my_wifi_password\" } Multiple network sections can exist for different wifi networks that you can connect to. Again the default configuration will provide a dhcp assigned ip address. No additional changes are needed for dynamic addressing.","title":"WiFi"},{"location":"Linux/Network/raspbian-networking/#disable-wifi","text":"When I use a Raspberry Pi as a server I usually disable wifi and bluetooth. The way I do it that seem to work is to append disable-wifi,disable-bt to dtoverlay= in /boot/config.txt dtoverlay=disable-wifi,disable-bt","title":"Disable Wifi"},{"location":"Linux/Network/raspbian-networking/#resources","text":"https://www.raspberrypi.org/documentation/computers/configuration.html","title":"Resources"},{"location":"Linux/Security/github-ssh/","tags":["git","ssh","github","crypto"],"text":"The easiest way of connecting to github from the git command line is to use ssh keys for authentication, especially now that the old username and password logins are have been replaced with generated token logins. This does however requre a bit of setup to get working. Updates January 2021: Change from rsa to ed25519 keys. Creating a new key I use the names id_25519_github and and id_25519_github.pub for my keys, using a unique key from evey host that I need to connect from. Use a keepass long random password. ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519_github To add to the ssh agent use: ssh-add ~/.ssh/id_ed25519_github ssh-add -L Configuring GitGub Open the user settings pagem and find SSH and GPG keys on the left. Click on ne SSH key and call it user@host , using your current username that you are using on the host you are connecting from. cat ~/.ssh/id_ed25519_github.pub Copy and paste it into the key field on GitHub Test your connection ssh -T git@github.com Check the output. You should see something like Hi username! You've successfully authenticated, but GitHub does not provide shell access. projects ssh instead of https to fix existing projects that use https use the following: git remote remove origin git remote add origin git@github.com:user/project.git The easiest is to just copy the url from the github web interface. That way you know it is correct without any typing mistakes.","title":"SSH setup for GitHub"},{"location":"Linux/Security/github-ssh/#updates","text":"January 2021: Change from rsa to ed25519 keys.","title":"Updates"},{"location":"Linux/Security/github-ssh/#creating-a-new-key","text":"I use the names id_25519_github and and id_25519_github.pub for my keys, using a unique key from evey host that I need to connect from. Use a keepass long random password. ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519_github To add to the ssh agent use: ssh-add ~/.ssh/id_ed25519_github ssh-add -L","title":"Creating a new key"},{"location":"Linux/Security/github-ssh/#configuring-gitgub","text":"Open the user settings pagem and find SSH and GPG keys on the left. Click on ne SSH key and call it user@host , using your current username that you are using on the host you are connecting from. cat ~/.ssh/id_ed25519_github.pub Copy and paste it into the key field on GitHub","title":"Configuring GitGub"},{"location":"Linux/Security/github-ssh/#test-your-connection","text":"ssh -T git@github.com Check the output. You should see something like Hi username! You've successfully authenticated, but GitHub does not provide shell access.","title":"Test your connection"},{"location":"Linux/Security/github-ssh/#projects-ssh-instead-of-https","text":"to fix existing projects that use https use the following: git remote remove origin git remote add origin git@github.com:user/project.git The easiest is to just copy the url from the github web interface. That way you know it is correct without any typing mistakes.","title":"projects ssh instead of https"},{"location":"Linux/Security/gpg-config/","tags":["gpg","crypto"],"text":"This guide explains how to configure GPG and some basic key management operations. It is not meant to be extremely secure, just good enough for home lab use. Updates August 2021: remove some old content that I don't use any more September 2021: Add details about copying and importing keys to other hosts. Resources These guides go into more detail about extremely secure setups. https://dev.to/benjaminblack/signing-git-commits-with-modern-encryption-1koh https://github.com/drduh/YubiKey-Guide https://blogs.itemis.com/en/openpgp-on-the-job-part-3-install-and-configure https://blogs.itemis.com/en/openpgp-on-the-job-part-4-generating-keys https://github.blog/2021-05-10-security-keys-supported-ssh-git-operations/ https://www.yubico.com/blog/github-now-supports-ssh-security-keys/ https://github.com/vorburger/vorburger.ch-Notes/blob/develop/security/ed25519-sk.md Software requirements These are all ubuntu packages. Basic software requirements: - gpg - gpg-agent - pinentry-curses (or pinentry-tty) Could not get anything to work with pinentry-qt or any other graphical frontend. Also note that modern ubuntu systems has transitioned to gpg 2 as default. just installing gpg gives version 2. You need to explicity install gnupg1 to get the old version 1. Package gnupg2 is officially marked as a transitional package, giving the same contents as gpg , except under the app name gpg2 . Sensible configuration files My dotfiles already takes care of these. ~/.gnupg/gpg.conf: personal-cipher-preferences AES256 AES192 AES personal-digest-preferences SHA512 SHA384 SHA256 personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed cert-digest-algo SHA512 s2k-digest-algo SHA512 s2k-cipher-algo AES256 charset utf-8 fixed-list-mode no-comments no-emit-version no-greeting keyid-format 0xlong list-options show-uid-validity verify-options show-uid-validity with-fingerprint require-cross-certification no-symkey-cache use-agent throw-keyids ~/.gnupg/gpg-agent-conf: #enable-ssh-support ttyname $GPG_TTY default-cache-ttl 60 max-cache-ttl 120 pinentry-program /usr/bin/pinentry-curses ~/.bashrc: export GPG_TTY=$(tty) Initial Setup {{< alert \"Do this once only\" warning >}} Create new master key gpg --expert --full-generate-key Generate a (8) RSA (set your own capabilities) key, and remove everything except certify. Use 4096 bits, without any expiry date. Full name and email, use short name for comment. View keys at ay time with gpg -k # public gpg -K # secret Useful tip: export KEYID = ..... This will allow you to use $KEYID in commands instead of the actual key id. Always reboot after working with secret keys to ensure any temporary variables are cleared. Add new userid (new email) gpg --expert --edit-key $KEYID Use the comment value specified above... The following commands create a new userid, prompting for new full name, email and comment fields. It then sets this new uid as primary and saves the key. adduid uid 2 trust (select ultimate) uid 1 primary save Add subkeys gpg --expert --edit-key $KEYID Starting from the same interactive shell as above, use the following. The new key command will prompt for key type (individual RSA keys for signing, encryption and authentication), bits (4096) and expiry date (1y - I like my signing keys to expire after 1 year) addkey save when done with all subkeys. Backup gpg --armor --export-secret-keys $KEYID > master.priv.key gpg --armor --export-secret-subkeys $KEYID > master.sub.priv.key gpg --armor --export $KEYID > master.pub.key gpg --output master.revoke.cert --gen-revoke $KEYID gpg --export-ownertrust > ownertrust.txt move all key files to a safe location. zip up complete dir and save as well. Disable master key For newer installations just use the following command: gpg --delete-secret-key $KEYID gpg --import master.sub.priv.key This key file is still in your backups, and you will need to restore it again to make future changes to subkeys. But for now the already created subkeys will work perfectly well without the master secret key present. Copying keys Easiest way is to copy whole .gnupg directory. Remember if copying from original backup it may contain the master key, and for safety you may want to remove it again. This works fine if you have similar environment and versions. Otherwise use key export and import: gpg --import master.pub.key gpg --import master.sub.priv.key gpg --import-ownertrust < ownertrust.txt","title":"Configuring GPG"},{"location":"Linux/Security/gpg-config/#updates","text":"August 2021: remove some old content that I don't use any more September 2021: Add details about copying and importing keys to other hosts.","title":"Updates"},{"location":"Linux/Security/gpg-config/#resources","text":"These guides go into more detail about extremely secure setups. https://dev.to/benjaminblack/signing-git-commits-with-modern-encryption-1koh https://github.com/drduh/YubiKey-Guide https://blogs.itemis.com/en/openpgp-on-the-job-part-3-install-and-configure https://blogs.itemis.com/en/openpgp-on-the-job-part-4-generating-keys https://github.blog/2021-05-10-security-keys-supported-ssh-git-operations/ https://www.yubico.com/blog/github-now-supports-ssh-security-keys/ https://github.com/vorburger/vorburger.ch-Notes/blob/develop/security/ed25519-sk.md","title":"Resources"},{"location":"Linux/Security/gpg-config/#software-requirements","text":"These are all ubuntu packages. Basic software requirements: - gpg - gpg-agent - pinentry-curses (or pinentry-tty) Could not get anything to work with pinentry-qt or any other graphical frontend. Also note that modern ubuntu systems has transitioned to gpg 2 as default. just installing gpg gives version 2. You need to explicity install gnupg1 to get the old version 1. Package gnupg2 is officially marked as a transitional package, giving the same contents as gpg , except under the app name gpg2 .","title":"Software requirements"},{"location":"Linux/Security/gpg-config/#sensible-configuration-files","text":"My dotfiles already takes care of these. ~/.gnupg/gpg.conf: personal-cipher-preferences AES256 AES192 AES personal-digest-preferences SHA512 SHA384 SHA256 personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed cert-digest-algo SHA512 s2k-digest-algo SHA512 s2k-cipher-algo AES256 charset utf-8 fixed-list-mode no-comments no-emit-version no-greeting keyid-format 0xlong list-options show-uid-validity verify-options show-uid-validity with-fingerprint require-cross-certification no-symkey-cache use-agent throw-keyids ~/.gnupg/gpg-agent-conf: #enable-ssh-support ttyname $GPG_TTY default-cache-ttl 60 max-cache-ttl 120 pinentry-program /usr/bin/pinentry-curses ~/.bashrc: export GPG_TTY=$(tty)","title":"Sensible configuration files"},{"location":"Linux/Security/gpg-config/#initial-setup","text":"{{< alert \"Do this once only\" warning >}}","title":"Initial Setup"},{"location":"Linux/Security/gpg-config/#create-new-master-key","text":"gpg --expert --full-generate-key Generate a (8) RSA (set your own capabilities) key, and remove everything except certify. Use 4096 bits, without any expiry date. Full name and email, use short name for comment. View keys at ay time with gpg -k # public gpg -K # secret Useful tip: export KEYID = ..... This will allow you to use $KEYID in commands instead of the actual key id. Always reboot after working with secret keys to ensure any temporary variables are cleared.","title":"Create new master key"},{"location":"Linux/Security/gpg-config/#add-new-userid-new-email","text":"gpg --expert --edit-key $KEYID Use the comment value specified above... The following commands create a new userid, prompting for new full name, email and comment fields. It then sets this new uid as primary and saves the key. adduid uid 2 trust (select ultimate) uid 1 primary save","title":"Add new userid (new email)"},{"location":"Linux/Security/gpg-config/#add-subkeys","text":"gpg --expert --edit-key $KEYID Starting from the same interactive shell as above, use the following. The new key command will prompt for key type (individual RSA keys for signing, encryption and authentication), bits (4096) and expiry date (1y - I like my signing keys to expire after 1 year) addkey save when done with all subkeys.","title":"Add subkeys"},{"location":"Linux/Security/gpg-config/#backup","text":"gpg --armor --export-secret-keys $KEYID > master.priv.key gpg --armor --export-secret-subkeys $KEYID > master.sub.priv.key gpg --armor --export $KEYID > master.pub.key gpg --output master.revoke.cert --gen-revoke $KEYID gpg --export-ownertrust > ownertrust.txt move all key files to a safe location. zip up complete dir and save as well.","title":"Backup"},{"location":"Linux/Security/gpg-config/#disable-master-key","text":"For newer installations just use the following command: gpg --delete-secret-key $KEYID gpg --import master.sub.priv.key This key file is still in your backups, and you will need to restore it again to make future changes to subkeys. But for now the already created subkeys will work perfectly well without the master secret key present.","title":"Disable master key"},{"location":"Linux/Security/gpg-config/#copying-keys","text":"Easiest way is to copy whole .gnupg directory. Remember if copying from original backup it may contain the master key, and for safety you may want to remove it again. This works fine if you have similar environment and versions. Otherwise use key export and import: gpg --import master.pub.key gpg --import master.sub.priv.key gpg --import-ownertrust < ownertrust.txt","title":"Copying keys"},{"location":"tags/","text":"Tags Following is a list of relevant tags: ansible Ansible cheat sheet crypto SSH setup for GitHub Configuring GPG dhcp Raspberry Pi Networking dns Cloudflare DNS Settings git SSH setup for GitHub github SSH setup for GitHub gpg Configuring GPG internet Linux Open Ports links Docker Links Kubernetes Links Website Links linux Linux Open Ports network Raspberry Pi Networking ports Linux Open Ports privacy Cloudflare DNS Settings raspberry pi Raspberry Pi Networking raspbian Raspberry Pi Networking ssh SSH setup for GitHub wifi Raspberry Pi Networking","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#ansible","text":"Ansible cheat sheet","title":"ansible"},{"location":"tags/#crypto","text":"SSH setup for GitHub Configuring GPG","title":"crypto"},{"location":"tags/#dhcp","text":"Raspberry Pi Networking","title":"dhcp"},{"location":"tags/#dns","text":"Cloudflare DNS Settings","title":"dns"},{"location":"tags/#git","text":"SSH setup for GitHub","title":"git"},{"location":"tags/#github","text":"SSH setup for GitHub","title":"github"},{"location":"tags/#gpg","text":"Configuring GPG","title":"gpg"},{"location":"tags/#internet","text":"Linux Open Ports","title":"internet"},{"location":"tags/#links","text":"Docker Links Kubernetes Links Website Links","title":"links"},{"location":"tags/#linux","text":"Linux Open Ports","title":"linux"},{"location":"tags/#network","text":"Raspberry Pi Networking","title":"network"},{"location":"tags/#ports","text":"Linux Open Ports","title":"ports"},{"location":"tags/#privacy","text":"Cloudflare DNS Settings","title":"privacy"},{"location":"tags/#raspberry-pi","text":"Raspberry Pi Networking","title":"raspberry pi"},{"location":"tags/#raspbian","text":"Raspberry Pi Networking","title":"raspbian"},{"location":"tags/#ssh","text":"SSH setup for GitHub","title":"ssh"},{"location":"tags/#wifi","text":"Raspberry Pi Networking","title":"wifi"}]}